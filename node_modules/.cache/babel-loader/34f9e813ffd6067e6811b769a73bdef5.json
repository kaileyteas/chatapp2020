{"ast":null,"code":"import _objectSpread from \"/Users/kale/Desktop/school/HCDE 438/ChatApp/chatapp/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/kale/Desktop/school/HCDE 438/ChatApp/chatapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nlet store;\nconst coll = 'messages';\n{\n  /* A hook is a function that returns  */\n}\n\nfunction useDB(room) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  function add(m) {\n    setMessages(current => {\n      const msgs = [m, ...current];\n      msgs.sort((a, b) => b.ts.seconds - a.ts.seconds);\n      return msgs;\n    });\n  }\n\n  function remove(id) {\n    setMessages(current => current.filter(m => m.id !== id));\n  }\n\n  useEffect(() => {\n    store.collection(coll) // .where('room','==',room)\n    .onSnapshot(snap => snap.docChanges().forEach(c => {\n      const doc = c.doc,\n            type = c.type;\n      if (type === 'added') add(_objectSpread({}, doc.data(), {\n        id: doc.id\n      }));\n      if (type === 'removed') remove(doc.id);\n    }));\n  }, []);\n  return messages;\n}\n\nconst db = {};\n\ndb.send = function (msg) {\n  return store.collection(coll).add(msg);\n};\n\ndb.delete = function (id) {\n  return store.collection(coll).doc(id).delete();\n};\n\nexport { db, useDB };\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDe5hejNin_uspcktTCkhfQAhbWMIARuy0\",\n  authDomain: \"chatterrrrrrr.firebaseapp.com\",\n  projectId: \"chatterrrrrrr\",\n  storageBucket: \"chatterrrrrrr.appspot.com\"\n};\nfirebase.initializeApp(firebaseConfig);\nstore = firebase.firestore();","map":{"version":3,"sources":["/Users/kale/Desktop/school/HCDE 438/ChatApp/chatapp/src/db.js"],"names":["useState","useEffect","firebase","store","coll","useDB","room","messages","setMessages","add","m","current","msgs","sort","a","b","ts","seconds","remove","id","filter","collection","onSnapshot","snap","docChanges","forEach","c","doc","type","data","db","send","msg","delete","firebaseConfig","apiKey","authDomain","projectId","storageBucket","initializeApp","firestore"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B;AACA,OAAO,oBAAP;AACA,OAAO,kBAAP;AAEA,IAAIC,KAAJ;AACA,MAAMC,IAAI,GAAG,UAAb;AAEA;AAAC;AAAyC;;AAC1C,SAASC,KAAT,CAAeC,IAAf,EAAqB;AAAA,oBACeN,QAAQ,CAAC,EAAD,CADvB;AAAA;AAAA,QACVO,QADU;AAAA,QACAC,WADA;;AAEjB,WAASC,GAAT,CAAaC,CAAb,EAAgB;AACZF,IAAAA,WAAW,CAACG,OAAO,IAAI;AACnB,YAAMC,IAAI,GAAG,CAACF,CAAD,EAAI,GAAGC,OAAP,CAAb;AACAC,MAAAA,IAAI,CAACC,IAAL,CAAU,CAACC,CAAD,EAAGC,CAAH,KAAQA,CAAC,CAACC,EAAF,CAAKC,OAAL,GAAeH,CAAC,CAACE,EAAF,CAAKC,OAAtC;AACA,aAAOL,IAAP;AACH,KAJU,CAAX;AAKH;;AACD,WAASM,MAAT,CAAgBC,EAAhB,EAAoB;AAChBX,IAAAA,WAAW,CAACG,OAAO,IAAGA,OAAO,CAACS,MAAR,CAAeV,CAAC,IAAGA,CAAC,CAACS,EAAF,KAAOA,EAA1B,CAAX,CAAX;AACH;;AACDlB,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAACkB,UAAN,CAAiBjB,IAAjB,EACA;AADA,KAECkB,UAFD,CAEYC,IAAI,IAAGA,IAAI,CAACC,UAAL,GAAkBC,OAAlB,CAA0BC,CAAC,IAAG;AAAA,YACtCC,GADsC,GACzBD,CADyB,CACtCC,GADsC;AAAA,YACjCC,IADiC,GACzBF,CADyB,CACjCE,IADiC;AAE7C,UAAIA,IAAI,KAAG,OAAX,EAAoBnB,GAAG,mBAAKkB,GAAG,CAACE,IAAJ,EAAL;AAAgBV,QAAAA,EAAE,EAACQ,GAAG,CAACR;AAAvB,SAAH;AACpB,UAAIS,IAAI,KAAG,SAAX,EAAsBV,MAAM,CAACS,GAAG,CAACR,EAAL,CAAN;AACzB,KAJkB,CAFnB;AAOH,GARQ,EAQN,EARM,CAAT;AASA,SAAOZ,QAAP;AACH;;AAED,MAAMuB,EAAE,GAAG,EAAX;;AACAA,EAAE,CAACC,IAAH,GAAU,UAASC,GAAT,EAAc;AACpB,SAAO7B,KAAK,CAACkB,UAAN,CAAiBjB,IAAjB,EAAuBK,GAAvB,CAA2BuB,GAA3B,CAAP;AACH,CAFD;;AAGAF,EAAE,CAACG,MAAH,GAAY,UAASd,EAAT,EAAa;AACrB,SAAOhB,KAAK,CAACkB,UAAN,CAAiBjB,IAAjB,EAAuBuB,GAAvB,CAA2BR,EAA3B,EAA+Bc,MAA/B,EAAP;AACH,CAFD;;AAIA,SAASH,EAAT,EAAazB,KAAb;AAEA,MAAM6B,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,+BAFO;AAGnBC,EAAAA,SAAS,EAAE,eAHQ;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAAvB;AAOApC,QAAQ,CAACqC,aAAT,CAAuBL,cAAvB;AACA/B,KAAK,GAAGD,QAAQ,CAACsC,SAAT,EAAR","sourcesContent":["import {useState, useEffect} from 'react'\nimport * as firebase from \"firebase/app\"\nimport \"firebase/firestore\"\nimport \"firebase/storage\"\n\nlet store\nconst coll = 'messages'\n\n{/* A hook is a function that returns  */}\nfunction useDB(room) {\n    const [messages, setMessages] = useState([])\n    function add(m) {\n        setMessages(current => {\n            const msgs = [m, ...current]\n            msgs.sort((a,b)=> b.ts.seconds - a.ts.seconds)\n            return msgs\n        })\n    }\n    function remove(id) {\n        setMessages(current=> current.filter(m=> m.id!==id))\n    }\n    useEffect(() => {\n        store.collection(coll)\n        // .where('room','==',room)\n        .onSnapshot(snap=> snap.docChanges().forEach(c=> {\n            const {doc, type} = c\n            if (type==='added') add({...doc.data(),id:doc.id})\n            if (type==='removed') remove(doc.id)\n        }))\n    }, [])\n    return messages\n}\n\nconst db = {}\ndb.send = function(msg) {\n    return store.collection(coll).add(msg)\n}\ndb.delete = function(id) {\n    return store.collection(coll).doc(id).delete()\n}\n\nexport { db, useDB }\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDe5hejNin_uspcktTCkhfQAhbWMIARuy0\",\n    authDomain: \"chatterrrrrrr.firebaseapp.com\",\n    projectId: \"chatterrrrrrr\",\n    storageBucket: \"chatterrrrrrr.appspot.com\",\n}\n\nfirebase.initializeApp(firebaseConfig)\nstore = firebase.firestore()"]},"metadata":{},"sourceType":"module"}